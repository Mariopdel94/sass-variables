/* Variables */
$color-map: (
  primary: #6ab446,
  secondary: #cccccc,
  neutral: #333333,
);

$color-shade-amount: 10%;
$color-shader-amount: 20%;
$color-trans-amount: 0.5;

$colors: ();

@each $code, $color in $color-map {
  $color-variants: (
    $code: (
      base: $color,
      light: lighten($color, $color-shade-amount),
      lighter: lighten($color, $color-shader-amount),
      dark: darken($color, $color-shade-amount),
      darker: darken($color, $color-shader-amount),
      trans: transparentize($color, $color-trans-amount)
    )
  );
  $colors: map-merge($colors, $color-variants);
}

/* Generate all the color classes (see css file output) */
@each $code, $color in $colors {
  @if type-of($color) == 'map' {
    @each $colorVariant, $colorCode in $color {
      .color-#{$code}-#{$colorVariant} { color: map-get($color, $colorVariant); }
      .bg-#{$code}-#{$colorVariant} { background-color: map-get($color, $colorVariant); }
    }
  }
}

/* Color function to use on other scss files */
@function color($color-name, $color-variant:null) {
  @if (map-get($colors, $color-name) != null) {
    @return map-get(map-get($colors, $color-name), $color-variant);
  }
}

/* Example: How to use color function */
.some-class {
  color: color(primary, base);
  background-color: color(secondary, trans);
}